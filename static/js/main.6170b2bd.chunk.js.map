{"version":3,"sources":["components/header/index.js","components/scoreboard/index.js","components/card/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","Scoreboard","highScore","currentScore","Card","onClick","selectCard","id","alt","src","image","App","state","cards","showAlert","showSuccess","selectedCards","shuffle","deck","i","length","j","Math","floor","random","setState","indexOf","push","console","log","handleIncrement","shuffleDeck","this","map","card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"y1CAYeA,MAVf,SAAgBC,GACd,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,cACb,4BAAKD,EAAME,UCUJC,MAdf,SAAoBH,GAClB,OACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,kBAAhB,eADF,IACuDD,EAAMI,WAE7D,yBAAKH,UAAU,0BACb,0BAAMA,UAAU,kBAAhB,mBAAwD,IACvDD,EAAMK,gBCAAC,EARF,SAACN,GAAD,OACX,yBAAKC,UAAU,gBAAgBM,QAAS,kBAAMP,EAAMQ,WAAWR,EAAMS,MACnE,yBAAKR,UAAU,kBACb,yBAAKS,IAAI,OAAOC,IAAKX,EAAMY,W,OC0HlBC,E,4MAxHbC,MAAQ,CACNC,QACAX,UAAW,EACXC,aAAc,EACdW,UAAW,EACXC,YAAa,EACbC,cAAe,I,EAGjBC,QAAU,SAACC,GACT,IAAK,IAAIC,EAAID,EAAKE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACxC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADF,EAEnB,CAACD,EAAKG,GAAIH,EAAKC,IAAnCD,EAAKC,GAFkC,KAE9BD,EAAKG,GAFyB,KAI1C,OAAOH,G,EAGTZ,WAAa,SAACC,GACZ,IAAIS,EAAgB,EAAKJ,MAAMI,cAC3Bb,EAAe,EAAKS,MAAMT,aAC1BD,EAAY,EAAKU,MAAMV,UAE3B,EAAKuB,SAAS,CACZX,UAAW,KAGsB,IAA/BE,EAAcU,QAAQnB,IACxBS,EAAcW,KAAKpB,GACnBqB,QAAQC,IAAIb,GAEZ,EAAKc,kBACL,EAAKC,eACgC,KAA5B,EAAKnB,MAAMT,aACpB,EAAKsB,SAAS,CACZV,YAAa,EACbZ,aAAc,EACda,cAAe,MAGjB,EAAKS,SAAS,CACZtB,aAAc,EACda,cAAe,KAGjB,EAAKS,SAAS,CACZX,UAAW,KAIXX,GAAgBD,GAClB,EAAKuB,SAAS,CACZvB,UAAWC,EAAe,K,EAKhC2B,gBAAkB,WAChB,EAAKL,SAAS,CAAEtB,aAAc,EAAKS,MAAMT,aAAe,K,EAG1D4B,YAAc,WACZ,EAAKN,SAAS,CAAEZ,MAAO,EAAKI,QAAQJ,M,uDAG5B,IAAD,OACP,OACE,yBAAKd,UAAU,OACb,yBAAKA,UAAU,oBACb,kBAAC,EAAD,CACEC,MAAM,oBACNG,aAAc6B,KAAKpB,MAAMT,aACzBD,UAAW8B,KAAKpB,MAAMV,YAGxB,kBAAC,EAAD,CACEA,UAAW8B,KAAKpB,MAAMV,UACtBC,aAAc6B,KAAKpB,MAAMT,eAG3B,yBAAKJ,UAAU,gBACb,yBACEA,UAAuC,IAA5BiC,KAAKpB,MAAMT,aAAqB,aAAe,QAE1D,wDACA,4HAMF,yBACEJ,UAAoC,IAAzBiC,KAAKpB,MAAME,UAAkB,eAAiB,SAEzD,mEAEF,yBACEf,UAC6B,IAA3BiC,KAAKpB,MAAMG,YAAoB,eAAiB,SAGlD,qFAIJ,yBAAKhB,UAAU,kBACZiC,KAAKpB,MAAMC,MAAMoB,KAAI,SAACC,GAAD,OACpB,kBAAC,EAAD,CACEC,IAAKD,EAAK3B,GACVA,GAAI2B,EAAK3B,GACTG,MAAOwB,EAAKxB,MACZJ,WAAY,EAAKA,uB,GA/Gf8B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.6170b2bd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div className=\"headerWrapper\">\r\n      <div className=\"headerText\">\r\n        <h1>{props.title}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Scoreboard(props) {\r\n  return (\r\n    <div className=\"scoreboard\">\r\n      <div className=\"scoreboardHighScore\">\r\n        <span className=\"scoreboardEmph\">High Score:</span> {props.highScore}\r\n      </div>\r\n      <div className=\"scoreboardCurrentScore\">\r\n        <span className=\"scoreboardEmph\"> Current Score:</span>{\" \"}\r\n        {props.currentScore}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scoreboard;\r\n","import React from \"react\";\r\n\r\nconst Card = (props) => (\r\n  <div className=\"cardContainer\" onClick={() => props.selectCard(props.id)}>\r\n    <div className=\"imageContainer\">\r\n      <img alt=\"card\" src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\nimport Header from \"./components/header\";\nimport Scoreboard from \"./components/scoreboard\";\nimport Card from \"./components/card\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  state = {\n    cards,\n    highScore: 0,\n    currentScore: 0,\n    showAlert: 0,\n    showSuccess: 0,\n    selectedCards: [],\n  };\n\n  shuffle = (deck) => {\n    for (let i = deck.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n    return deck;\n  };\n\n  selectCard = (id) => {\n    let selectedCards = this.state.selectedCards;\n    let currentScore = this.state.currentScore;\n    let highScore = this.state.highScore;\n\n    this.setState({\n      showAlert: 0,\n    });\n\n    if (selectedCards.indexOf(id) === -1) {\n      selectedCards.push(id);\n      console.log(selectedCards);\n\n      this.handleIncrement();\n      this.shuffleDeck();\n    } else if (this.state.currentScore === 12) {\n      this.setState({\n        showSuccess: 1,\n        currentScore: 0,\n        selectedCards: [],\n      });\n    } else {\n      this.setState({\n        currentScore: 0,\n        selectedCards: [],\n      });\n\n      this.setState({\n        showAlert: 1,\n      });\n    }\n\n    if (currentScore >= highScore) {\n      this.setState({\n        highScore: currentScore + 1,\n      });\n    }\n  };\n\n  handleIncrement = () => {\n    this.setState({ currentScore: this.state.currentScore + 1 });\n  };\n\n  shuffleDeck = () => {\n    this.setState({ cards: this.shuffle(cards) });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"gameboardWrapper\">\n          <Header\n            title=\"React Clicky Game\"\n            currentScore={this.state.currentScore}\n            highScore={this.state.highScore}\n          />\n\n          <Scoreboard\n            highScore={this.state.highScore}\n            currentScore={this.state.currentScore}\n          />\n\n          <div className=\"alertWrapper\">\n            <div\n              className={this.state.currentScore === 0 ? \"info start\" : \"info\"}\n            >\n              <h4>Press any bird to start!</h4>\n              <p>\n                Click on any bird, but only do so once! If you can choose a\n                unique bird every time, you win!\n              </p>\n            </div>\n\n            <div\n              className={this.state.showAlert === 1 ? \"alert active\" : \"alert\"}\n            >\n              <p>Oh! Double-click! Nice try, though.</p>\n            </div>\n            <div\n              className={\n                this.state.showSuccess === 1 ? \"alert active\" : \"alert\"\n              }\n            >\n              <p>Very nice! All the way through and no double-clicks.</p>\n            </div>\n          </div>\n\n          <div className=\"gameboardCards\">\n            {this.state.cards.map((card) => (\n              <Card\n                key={card.id}\n                id={card.id}\n                image={card.image}\n                selectCard={this.selectCard}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}